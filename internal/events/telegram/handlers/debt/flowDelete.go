package debt

import (
	"fmt"
	"strconv"
	"strings"
)

func (h *Handler) handleDeleteFlow(chatID, userID int, step string, data string) error {
	h.logger.Debugf("handle delete flow step: %s, data:%s", step, data)

	session, exists := h.sessionMgr.Get(userID)
	if !exists && step != "start" {
		return h.handleDeleteFlow(chatID, userID, "start", "")
	}

	switch step {
	case "start":
		debts, err := h.storage.Debts(h.ctx, int64(userID))
		if err != nil {
			h.logger.Errorf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ–ª–≥–æ–≤: %v", err)
			h.sessionMgr.Delete(userID)
			return h.sendErrorMessage(chatID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ–ª–≥–æ–≤")
		}

		if len(debts) == 0 {
			return h.sendWithKeyboard(chatID, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–ª–≥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è", h.debtsKeyboard())
		}

		newState := &State{
			FlowType: flowDelete,
			Step:     "select",
		}
		h.sessionMgr.Set(userID, h.ID(), newState)

		return h.sendWithKeyboard(chatID,
			"–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ª–≥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
			h.debtsListKeyboard(debts, flowDelete))

	case "select":
		debtID, err := strconv.ParseInt(strings.TrimPrefix(data, "debt_delete_select_"), 10, 64)
		if err != nil {
			h.sessionMgr.Delete(userID)
			return h.sendErrorMessage(chatID, "–ù–µ–≤–µ—Ä–Ω—ã–π ID –¥–æ–ª–≥–∞")
		}

		debt, err := h.storage.Get(h.ctx, debtID)
		if err != nil {
			h.logger.Errorf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ª–≥–∞ %d: %v", debtID, err)
			return h.sendErrorMessage(chatID, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ª–≥–∞")
		}

		h.logger.Debugf("get temp debt:%+v", debt)

		if debt.UserID != int64(userID) {
			h.sessionMgr.Delete(userID)
			return h.sendErrorMessage(chatID, "–≠—Ç–æ –Ω–µ –≤–∞—à –¥–æ–ª–≥")
		}

		state := &State{
			FlowType: flowDelete,
			TempDebt: debt,
			Step:     "confirm",
		}
		h.sessionMgr.Set(userID, h.ID(), state)

		// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ nil
		var dateStr string
		if debt.ReturnDate != nil {
			dateStr = debt.ReturnDate.Format("02.01.2006")
		} else {
			dateStr = "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
		}

		confirmMsg := fmt.Sprintf(
			"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –¥–æ–ª–≥?\n\n"+
				"üîπ –û–ø–∏—Å–∞–Ω–∏–µ: %s\n"+
				"üîπ –°—É–º–º–∞: %d‚ÇΩ\n"+
				"üîπ –î–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: %s\n\n"+
				"‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!",
			debt.Description,
			debt.Amount,
			dateStr,
		)

		return h.sendWithKeyboard(chatID, confirmMsg, h.confirmDeleteKeyboard())

	case "confirm":
		if data == string(cbDeleteConfirm) {
			state, ok := session.State.(*State)
			if !ok || state.TempDebt == nil {
				return h.sendErrorMessage(chatID, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ —É—Ç–µ—Ä—è–Ω—ã")
			}

			if err := h.storage.Delete(h.ctx, state.TempDebt.ID); err != nil {
				h.logger.Errorf("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–ª–≥–∞ %d: %v", state.TempDebt.ID, err)
				h.sessionMgr.Delete(userID)
				return h.sendErrorMessage(chatID, "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–æ–ª–≥–∞")
			}

			h.sessionMgr.Delete(userID)
			return h.sendWithKeyboard(chatID, "‚úÖ –î–æ–ª–≥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω", h.debtsKeyboard())
		} else if data == string(cbCancel) {
			h.sessionMgr.Delete(userID)
			return h.sendWithKeyboard(chatID, "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", h.debtsKeyboard())
		}

	default:
		h.sessionMgr.Delete(userID)
		return h.sendErrorMessage(chatID, fmt.Sprintf("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —É–¥–∞–ª–µ–Ω–∏—è: %s", step))
	}

	return nil
}
