package debt

import (
	tgClient "drillCore/internal/clients/telergam"
	"drillCore/internal/model"
	"fmt"
	"sort"

	"time"
)

func (h *Handler) debtsKeyboard() tgClient.ReplyMarkup {
	return tgClient.NewInlineKeyboard([][]tgClient.InlineKeyboardButton{
		{
			{Text: "üå™Ô∏è DRILL THROUGH", CallbackData: cbAddStart},
			{Text: "üåÄ RESHAPE", CallbackData: cbEditStart},
		},
		{
			{Text: "üí• SMASH DEBT", CallbackData: cbPayStart},
			{Text: "‚ò†Ô∏è ANNIHILATE", CallbackData: cbDeleteStart},
		},
		{
			{Text: "üìú BATTLE LOG", CallbackData: cbList},
		},
		{
			{Text: "üåÄ SPIRAL MENU", CallbackData: "main_menu"},
		},
	})
}

func (h *Handler) confirmPayKeyboard(amount int64) tgClient.ReplyMarkup {
	return tgClient.NewInlineKeyboard([][]tgClient.InlineKeyboardButton{
		{
			{Text: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", CallbackData: cbPayConfirm + fmt.Sprintf("_%d", amount)},
			{Text: "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", CallbackData: cbCancel},
		},
	})
}

func (h *Handler) cancelKeyboard() tgClient.ReplyMarkup {
	return tgClient.NewInlineKeyboard([][]tgClient.InlineKeyboardButton{
		{{Text: "‚ùå –û—Ç–º–µ–Ω–∞", CallbackData: cbCancel}},
	})
}

func (h *Handler) debtsListKeyboard(debts []*model.Debt, flow string) tgClient.ReplyMarkup {
	// –°–æ—Ä—Ç–∏—Ä—É–µ–º: —Å–Ω–∞—á–∞–ª–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ (–ø–æ –¥–∞—Ç–µ), –∑–∞—Ç–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ
	sort.Slice(debts, func(i, j int) bool {
		now := time.Now()

		// –û–±–∞ –¥–æ–ª–≥–∞ —Å –¥–∞—Ç–æ–π
		if debts[i].ReturnDate != nil && debts[j].ReturnDate != nil {
			iOverdue := debts[i].ReturnDate.Before(now)
			jOverdue := debts[j].ReturnDate.Before(now)

			// –ï—Å–ª–∏ –æ–±–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω—ã - —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—Ç–µ–ø–µ–Ω–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–∏
			if iOverdue && jOverdue {
				return debts[i].ReturnDate.Before(*debts[j].ReturnDate)
			}
			// –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –≤—Å–µ–≥–¥–∞ –Ω–∏–∂–µ
			if iOverdue {
				return false
			}
			if jOverdue {
				return true
			}
			// –û–±–∞ –Ω–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω—ã - —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
			return debts[i].ReturnDate.Before(*debts[j].ReturnDate)
		}

		// –î–æ–ª–≥–∏ –±–µ–∑ –¥–∞—Ç—ã –∏–¥—É—Ç –ø–æ—Å–ª–µ –¥–æ–ª–≥–æ–≤ —Å –¥–∞—Ç–æ–π
		if debts[i].ReturnDate == nil {
			return false
		}
		if debts[j].ReturnDate == nil {
			return true
		}
		return true
	})

	var buttons [][]tgClient.InlineKeyboardButton
	for _, d := range debts {
		// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
		btnText := fmt.Sprintf("‚ñ´Ô∏è %s - %s‚ÇΩ",
			truncate(d.Description, 20),
			formatMoney(d.Amount))

		// –ü–æ–º–µ—á–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ
		if d.ReturnDate != nil && d.ReturnDate.Before(time.Now()) {
			btnText = fmt.Sprintf("‚ùó %s - %s‚ÇΩ",
				truncate(d.Description, 20),
				formatMoney(d.Amount))
		}

		buttons = append(buttons, []tgClient.InlineKeyboardButton{
			{
				Text:         btnText,
				CallbackData: fmt.Sprintf(prefix+flow+"_select_%d", d.ID),
			},
		})
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
	buttons = append(buttons, []tgClient.InlineKeyboardButton{
		{Text: "‚Ü©Ô∏è –ù–∞–∑–∞–¥", CallbackData: cbMenu},
	})

	return tgClient.NewInlineKeyboard(buttons)
}

// –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
func truncate(s string, n int) string {
	if len(s) <= n {
		return s
	}
	return s[:n-3] + "..."
}

func (h *Handler) dateKeyboard() tgClient.ReplyMarkup {
	return tgClient.NewInlineKeyboard([][]tgClient.InlineKeyboardButton{
		{
			{Text: "–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É", CallbackData: cbDateStart},
		},
		{
			{Text: "‚ùå –û—Ç–º–µ–Ω–∞", CallbackData: cbCancel},
		},
	})
}

func (h *Handler) yearKeyboard() tgClient.ReplyMarkup {
	currentYear := time.Now().Year()
	var rows [][]tgClient.InlineKeyboardButton

	// –ü–µ—Ä–≤—ã–π —Ä—è–¥: —Ç–µ–∫—É—â–∏–π –∏ —Å–ª–µ–¥—É—é—â–∏–µ 2 –≥–æ–¥–∞
	var firstRow []tgClient.InlineKeyboardButton
	for y := currentYear; y <= currentYear+2; y++ {
		firstRow = append(firstRow, tgClient.InlineKeyboardButton{
			Text:         fmt.Sprintf("üìÖ %d", y),
			CallbackData: fmt.Sprintf(cbYear, y),
		})
	}
	rows = append(rows, firstRow)

	// –í—Ç–æ—Ä–æ–π —Ä—è–¥: —Å–ª–µ–¥—É—é—â–∏–µ 3 –≥–æ–¥–∞
	var secondRow []tgClient.InlineKeyboardButton
	for y := currentYear + 3; y <= currentYear+5; y++ {
		secondRow = append(secondRow, tgClient.InlineKeyboardButton{
			Text:         fmt.Sprintf("üìÖ %d", y),
			CallbackData: fmt.Sprintf(cbYear, y),
		})
	}
	rows = append(rows, secondRow)

	// –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
	rows = append(rows, []tgClient.InlineKeyboardButton{
		{Text: "‚ùå –û—Ç–º–µ–Ω–∞", CallbackData: cbCancel},
	})

	return tgClient.NewInlineKeyboard(rows)
}

func (h *Handler) monthKeyboard() tgClient.ReplyMarkup {
	var rows [][]tgClient.InlineKeyboardButton

	for m := 1; m <= 12; {
		var row []tgClient.InlineKeyboardButton
		for i := 0; i < 4 && m <= 12; i++ { // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ª–æ–≤–∏–µ
			row = append(row, tgClient.InlineKeyboardButton{
				Text:         time.Month(m).String(), // –õ—É—á—à–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤
				CallbackData: fmt.Sprintf(cbMonth, m),
			})
			m++
		}
		rows = append(rows, row)
	}

	rows = append(rows, []tgClient.InlineKeyboardButton{
		{Text: "‚ùå –û—Ç–º–µ–Ω–∞", CallbackData: cbCancel},
	})

	return tgClient.NewInlineKeyboard(rows)
}

func (h *Handler) dayKeyboard(month int) tgClient.ReplyMarkup {
	now := time.Now()
	year := now.Year() // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ–¥
	daysInMonth := time.Date(year, time.Month(month)+1, 0, 0, 0, 0, 0, time.UTC).Day()
	var rows [][]tgClient.InlineKeyboardButton

	// –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –º–µ—Å—è—Ü–∞ –∏ –≥–æ–¥–∞
	monthName := time.Month(month).String()
	rows = append(rows, []tgClient.InlineKeyboardButton{
		{Text: fmt.Sprintf("%s %d", monthName, year), CallbackData: "ignore"},
	})

	// –î–Ω–∏ –Ω–µ–¥–µ–ª–∏ (–∑–∞–≥–æ–ª–æ–≤–∫–∏)
	weekdays := []string{"–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"}
	var headerRow []tgClient.InlineKeyboardButton
	headerRow = append(headerRow, tgClient.InlineKeyboardButton{
		Text:         "‚Ññ",
		CallbackData: "ignore",
	})
	for _, day := range weekdays {
		headerRow = append(headerRow, tgClient.InlineKeyboardButton{
			Text:         day,
			CallbackData: "ignore",
		})
	}
	rows = append(rows, headerRow)

	// –í—ã—á–∏—Å–ª—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è –º–µ—Å—è—Ü–∞
	firstDay := time.Date(year, time.Month(month), 1, 0, 0, 0, 0, time.UTC)
	weekday := int(firstDay.Weekday())
	if weekday == 0 {
		weekday = 7 // –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ -> 7
	}

	// –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è
	_, firstWeek := firstDay.ISOWeek()

	currentWeek := firstWeek
	dayCounter := 1

	for dayCounter <= daysInMonth {
		var row []tgClient.InlineKeyboardButton

		// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏
		row = append(row, tgClient.InlineKeyboardButton{
			Text:         fmt.Sprintf("(%d)", currentWeek),
			CallbackData: "ignore",
		})

		// –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è (–¥–ª—è –ø–µ—Ä–≤–æ–π –Ω–µ–¥–µ–ª–∏)
		if dayCounter == 1 {
			for i := 1; i < weekday; i++ {
				row = append(row, tgClient.InlineKeyboardButton{
					Text:         " ",
					CallbackData: "ignore",
				})
			}
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ –º–µ—Å—è—Ü–∞
		for len(row) < 8 && dayCounter <= daysInMonth { // 1 (–Ω–µ–¥–µ–ª—è) + 7 –¥–Ω–µ–π
			row = append(row, tgClient.InlineKeyboardButton{
				Text:         fmt.Sprintf("%d", dayCounter),
				CallbackData: fmt.Sprintf(cbDay, dayCounter),
			})
			dayCounter++

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–º–µ–Ω—É –Ω–µ–¥–µ–ª–∏
			if len(row) == 8 { // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞
				currentDate := time.Date(year, time.Month(month), dayCounter, 0, 0, 0, 0, time.UTC)
				_, currentWeek = currentDate.ISOWeek()
			}
		}

		// –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —è—á–µ–π–∫–∏ –ø—É—Å—Ç—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ (–¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏)
		for len(row) < 8 {
			row = append(row, tgClient.InlineKeyboardButton{
				Text:         " ",
				CallbackData: "ignore",
			})
		}

		rows = append(rows, row)
	}

	// –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
	rows = append(rows, []tgClient.InlineKeyboardButton{
		{Text: "‚ùå –û—Ç–º–µ–Ω–∞", CallbackData: cbCancel},
	})

	return tgClient.NewInlineKeyboard(rows)
}

func (h *Handler) editOptionsKeyboard() tgClient.ReplyMarkup {
	return tgClient.NewInlineKeyboard([][]tgClient.InlineKeyboardButton{
		{
			{Text: "–û–ø–∏—Å–∞–Ω–∏–µ", CallbackData: cbEditDescProcess},
			{Text: "–°—É–º–º—É", CallbackData: cbEditAmountProcess},
			{Text: "–î–∞—Ç—É", CallbackData: cbEditDateProcess},
		},
		{
			{Text: "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", CallbackData: cbFinishEdit},
			{Text: "‚ùå –û—Ç–º–µ–Ω–∞", CallbackData: cbCancel},
		},
	})
}

func (h *Handler) confirmDeleteKeyboard() tgClient.ReplyMarkup {
	return tgClient.NewInlineKeyboard([][]tgClient.InlineKeyboardButton{
		{
			{Text: "‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", CallbackData: cbDeleteConfirm},
			{Text: "‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", CallbackData: cbCancel},
		},
	})
}
